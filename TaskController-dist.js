!function(){"use strict";var t=[,function(t,e,s){s.r(e),s.d(e,{Model:function(){return a}});class a{static insertTestDataToStorage(){if(null==localStorage.getItem("tasks")){const t=[{id:1,completed:!0,text:"Task 1"},{id:2,completed:!1,text:"Task 2"},{id:3,completed:!1,text:"Task 3"}];localStorage.setItem("tasks",JSON.stringify(t))}}static getTaskListFromStorage(){return JSON.parse(localStorage.getItem("tasks"))}insertTaskToList(t){const e=JSON.parse(localStorage.getItem("tasks"));let s=null==e[e.length-1]?0:e[e.length-1].id;e.push({id:++s,completed:!1,text:t}),this.updateStorage(e)}updateTaskByID(t,e,s){const a=JSON.parse(localStorage.getItem("tasks")).map((a=>(a.id==t&&(a.completed=e,a.text=s),a)));this.updateStorage(a)}deleteTaskByID(t){const e=JSON.parse(localStorage.getItem("tasks")).filter((e=>{if(e.id!=t)return e}));this.updateStorage(e)}updateStorage(t){localStorage.removeItem("tasks"),localStorage.setItem("tasks",JSON.stringify(t))}getTaskFromList(t){return JSON.parse(localStorage.getItem("tasks")).find((e=>e.id==t))}}}],e={};function s(a){var o=e[a];if(void 0!==o)return o.exports;var r=e[a]={exports:{}};return t[a](r,r.exports,s),r.exports}s.d=function(t,e){for(var a in e)s.o(e,a)&&!s.o(t,a)&&Object.defineProperty(t,a,{enumerable:!0,get:e[a]})},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var a={};!function(){s.r(a),s.d(a,{TaskController:function(){return e}});var t=s(1);t.Model;class e{constructor(t=null){this.id=t,this.completed=null!=t&&this.getTaskByID(t).completed,this.text=null==t?"New Task":this.getTaskByID(t).text}static loadTestData(){t.Model.insertTestDataToStorage()}getTaskByID(e){return(new t.Model).getTaskFromList(e)}save(){(new t.Model).updateTaskByID(this.id,this.completed,this.text)}delete(){(new t.Model).deleteTaskByID(this.id)}getTasks(){return t.Model.getTaskListFromStorage()}addToList(e="New Task"){(new t.Model).insertTaskToList(e)}}}()}();